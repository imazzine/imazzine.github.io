@startuml Types

    hide empty members
    hide empty methods
    hide empty fields
    hide empty attributes

    title EventTargetAPI Types
    package "@imazzine/core" as ImazzineCorePackage {

        object internal #ffc7fd {
            +LogLevel: LogLevel
            +LoggerConstructor: { new (): T extends Logger }
            +undisposed: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map Map]]<[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]], Disposable>
            +listenersMaps: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map Map]]<EventTarget, [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map Map]]<[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]], [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array Array]]<EventListener>>>
            +nodesIndices: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map Map]]<Node, NodeIndex>
            +[[./Definition_internal.getAncestors.svg getAncestors]](node: EventTarget): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array Array]]<EventTarget>
            +[[./Definition_internal.dispatchEvent.svg dispatchEvent]](target: EventTarget, event: Event): boolean
            +[[./Definition_internal.fireListeners.svg fireListeners]](binder: EventBinder, event: Event, capture: boolean): boolean
        }

        object "exports" as ImazzineCorePackageExports #c9ffc7 {
            +[[./Definition_exports.getUuid.svg getUuid]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]]
            +[[./Definition_exports.getStack.svg getStack]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]]
            +[[./Definition_exports.getUndisposed.svg getUndisposed]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array Array]]<Disposable>
            +[[./Definition_exports.getAncestors.svg getAncestors]](node: EventTarget): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array Array]]<EventTarget>
            +setLogLevel(level: LogLevel): void
            +setLoggerConstructor(LoggerConstructor: { new (): T extends Logger }): void
            +Errors: Errors
            +EventPhase: EventPhase
            +LogLevel: LogLevel
            +Logger: { new (): Logger }
            +Monitorable: { new (): Monitorable }
            +Disposable: { new (): Disposable }
            +EventTarget: { new (): EventTarget }
            +Node: { new (): Node }
            +Event: { new (): Event }
        }

        enum "Errors" as ImazzineCorePackageErrors {
            +<b>MANUAL_CALL</b>:\nDisposable#disposeInternal() method\nshould not be explicitly called.\nUse Disposable#dispose() instead.
            +<b>BROKEN_CHAIN</b>:\nsuper.dispose() was not called in\noverridden method.
        }
        ' ImazzineCorePackageErrors "1" -* "1" ImazzineCorePackageExports
        ImazzineCorePackageExports "1" *-- "1" ImazzineCorePackageErrors

        enum EventPhase {
            +<b>NONE</b>: 0
            +<b>CAPTURING_PHASE</b>: 1
            +<b>AT_TARGET</b>: 2
            +<b>BUBBLING_PHASE</b>: 3
        }
        ImazzineCorePackageExports "1" *-- "1" EventPhase

        enum LogLevel {
            -<b>SYSTEM_LOG</b>: 00
            +<b>TRACE</b>: 10
            +<b>DEBUG</b>: 20
            +<b>INFO</b>: 30
            +<b>WARN</b>: 40
            +<b>ERROR</b>: 50
            +<b>FATAL</b>: 60
        }
        ' LogLevel "1" -* "1" ImazzineCorePackageExports
        ImazzineCorePackageExports "1" *-- "1" LogLevel

        class Logger {
            -_id: string
            -_level: string
            --
            #logInternal(id: string, level: LogLevel, msg: [[https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown unknown]]): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            ..
            +constructor(id: string, level: LogLevel): Logger
            ..
            +setLevel(level: LogLevel): void
            ..
            +log(msg: [[https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown unknown]])
            ..
            +trace(msg: [[https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown unknown]]): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +debug(msg: [[https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown unknown]]): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +info(msg: [[https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown unknown]]): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +warn(msg: [[https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown unknown]]): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +error(msg: [[https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown unknown]]): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +fatal(msg: [[https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown unknown]]): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
        }
        ' ImazzineCorePackageExports --> Logger : export
        
        class Monitorable {
            -_uuid: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]]
            -_stack: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]]
            -_logger: Logger
            +[[./Definition_Monitorable.constructor.svg constructor]](): Monitorable
            +[[./Definition_Monitorable.getUuid.svg getUuid]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]]
            +[[./Definition_Monitorable.getCreationStack.svg getCreationStack]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]]
            +getLogger(): Logger
        }
        ' ImazzineCorePackageExports --> Monitorable : export
        Logger "1" -* "1" Monitorable

        class Disposable extends Monitorable {
            -_disposed: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            -_disposing: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +[[./Definition_Disposable.constructor.svg constructor]](): Disposable
            #[[./Definition_Disposable.disposeInternal.svg disposeInternal]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void void]]
            +[[./Definition_Disposable.dispose.svg dispose]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void void]]
            +[[./Definition_Disposable.isDisposed.svg isDisposed]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
        }
        internal "1" o-- "0..*" Disposable
        ' ImazzineCorePackageExports --> Disposable : export

        class EventListener {
            +callback: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function Function]]
            +capture: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +passive: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +removed: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +once: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +[[./Definition_EventListener.constructor.svg constructor]](callback: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function Function]], capture=[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean false]], passive=[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean false]], once=[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean false]]): EventListener
        }
        EventListener "0..*" --o "1" internal
        Logger -[hidden]- EventListener

        class EventTarget extends Disposable {
            +[[./Definition_EventTarget.constructor.svg constructor]](): EventTarget
            +[[./Definition_EventTarget.disposeInternal.svg disposeInternal]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void void]]
            +[[./Definition_EventTarget.addEventListener.svg addEventListener]](type: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]], callback: Function, capture?: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]], passive?: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]], once?: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void void]]
            +[[./Definition_EventTarget.removeEventListener.svg removeEventListener]](type: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]], callback: Function, capture?: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]], passive?: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]], once?: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void void]]
            +[[./Definition_EventTarget.dispatchEvent.svg dispatchEvent]](event: Event): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
        }
        internal "1" o-- "0..*" EventTarget
        ' ImazzineCorePackageExports --> EventTarget : export

        class EventBinder {
            +phase: EventPhase
            +passive: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +stopped: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +prevented: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +target?: EventTarget
            +current?: EventTarget
            +[[./Definition_EventBinder.constructor.svg constructor]](phase: EventPhase, target?: EventTarget, current?: EventTarget): EventBinder
        }
        EventBinder "1" *-- "1..2" EventTarget

        class Event {
            -_type: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]]
            -_timeStamp: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number number]]
            -_binder: EventBinder
            ..
            +[[./Definition_Event.type.svg get type]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]]
            +[[./Definition_Event.target.svg get target]](): EventTarget
            +[[./Definition_Event.currentTarget.svg get currentTarget]](): EventTarget
            +[[./Definition_Event.eventPhase.svg get eventPhase]](): EventPhase
            +[[./Definition_Event.defaultPrevented.svg get defaultPrevented]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +[[./Definition_Event.timeStamp.svg get timeStamp]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number number]]
            --
            +[[./Definition_Event.constructor.svg constructor]](type: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String string]]): Event
            +[[./Definition_Event.stopPropagation.svg stopPropagation]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void void]]
            +[[./Definition_Event.preventDefault.svg preventDefault]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void void]]
            ..
            +[[./Definition_Event.setBinderInternal.svg setBinderInternal]](binder: EventBinder): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void void]]
        }
        Event "1" *-- "1..*" EventBinder
        ' ImazzineCorePackageExports --> Event : export

        class Node extends EventTarget {
            +[[./Definition_Node.isConnected.svg get isConnected]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            ..
            +[[./Definition_Node.parentNode.svg get parentNode]](): Node
            ..
            +[[./Definition_Node.childNodes.svg get childNodes]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map Map]]<Node>
            +[[./Definition_Node.firstChild.svg get firstChild]](): Node
            +[[./Definition_Node.lastChild.svg get lastChild]](): Node
            ..
            +[[./Definition_Node.nextSibling.svg get nextSibling]](): Node
            +[[./Definition_Node.previousSibling.svg get previousSibling]](): Node
            --
            +[[./Definition_Node.constructor.svg constructor]](): Node
            +[[./Definition_Node.disposeInternal.svg disposeInternal]](): void
            --
            +[[./Definition_Node.getRootNode.svg getRootNode]](): Node
            +[[./Definition_Node.hasChildNodes.svg hasChildNodes]](): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            +[[./Definition_Node.contains.svg contains]](otherNode: Node): [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean boolean]]
            ..
            +[[./Definition_Node.appendChild.svg appendChild]](childNode: Node): Node
            +[[./Definition_Node.insertBefore.svg insertBefore]](newNode: Node, refNode: Node|null): Node
            +[[./Definition_Node.removeChild.svg removeChild]](child: Node): Node
            +[[./Definition_Node.replaceChild.svg replaceChild]](newChild: Node, oldChild: Node): Node
        }
        internal "1" o-- "0..*" Node
        ' ImazzineCorePackageExports --> Node : export

        class NodeIndex {
            +parent?: Node
            +children: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array Array]]<Node>
            +[[./Definition_NodeIndex.constructor.svg constructor]](parent?: Node, children?: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array Array]]<Node>)
        }
        internal "1" o-- "0..*" NodeIndex
        NodeIndex "1" o-- "0..*" Node
    }
@enduml

@startuml Definition_exports.getUuid
    title Definition: exports.getUuid()

    start
        :const name = [[https://www.npmjs.com/package/uuid#version-1-timestamp uuid.v1()]] ]
        :const ns = [[https://www.npmjs.com/package/uuid#version-1-timestamp uuid.v1()]] ]
        :const uid = [[https://www.npmjs.com/package/uuid#version-5-namespace uuid.v5(name, ns)]] ]
        :return uid/
    end
@enduml

@startuml Definition_exports.getStack
    title Definition: exports.getStack()

    start
        partition SyncTask {
            if (env.npm_package_config_monitoring) then (yes)
                :let stack = new [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack Error().stack]] ]
                :stack = stack.replace('Error', 'Created') ]
                :const stackArray = stack.split('\\n') ]
                :stackArray.splice(1, 1) ]
                :stack = stackArray.join('\\n')]
            else (no)
                :let stack = 'disabled' ]
            endif
                :return stack/
        }
    end
@enduml

@startuml Definition_exports.getUndisposed
    title Definition: exports.getUndisposed()

    start
        partition SyncTask {
            :return internal.undisposed.values()/
        }
    end
@enduml

@startuml Definition_exports.getAncestors
    title Definition: exports.getAncestors()

    start
        partition SyncTask {
            :node/
            :let ancestors = internal.[[./Definition_internal.getAncestors.svg getAncestors]](node) |
            :return ancestors /
        }
    end
@enduml

@startuml Definition_internal.getAncestors
    title Definition: internal.getAncestors()

    start
        partition SyncTask {
            :node/
            :let ancestors = [] ]
            if (node instanceof Node) then (yes)
                :let ancestor = internal.nodesIndices.get(node).parent]
                while (ancestor != null)
                    :ancestors.push(ancestor) ]
                    :ancestor = internal.nodesIndices.get(ancestor).parent]
                endwhile
            endif
            :return ancestors /
        }
    end
@enduml

@startuml Definition_internal.dispatchEvent
    title Definition: internal.dispatchEvent()

    start
        partition SyncTask {
            :target, event/
            :const ancestors = internal.[[./Definition_internal.getAncestors.svg getAncestors]](target) |
            :const binder = [[./Definition_EventBinder.constructor.svg new EventBinder]](EventPhase.NONE, target)]
            :event.[[./Definition_Event.setBinderInternal.svg setBinderInternal]](binder)|
            :let result = true]
            :let current]
            while (let i = ancestors.length - 1; !binder.stopped && i >= 0; i--)
                :binder.phase = EventPhase.CAPTURING_PHASE]
                :binder.current = ancestors[i] ]
                :result = internal.[[./Definition_internal.fireListeners.svg fireListeners]](binder, event, true) && result |
            endwhile
            if (!binder.stopped) then (yes)
                :binder.phase = EventPhase.AT_TARGET]
                :binder.current = target ]
                :result = internal.[[./Definition_internal.fireListeners.svg fireListeners]](binder, event, true) && result |
                if (!binder.stopped) then (yes)
                    :result = internal.[[./Definition_internal.fireListeners.svg fireListeners]](binder, event, false) && result |
                endif
            endif
            while (let i = 0; !binder.stopped && i < ancestors.length; i++)
                :binder.phase = EventPhase.BUBBLING_PHASE]
                :binder.current = ancestors[i] ]
                :result = internal.[[./Definition_internal.fireListeners.svg fireListeners]](binder, event, false)  && result |
            endwhile
            :binder.phase = EventPhase.NONE]
            :return result/
        }
    end
@enduml

@startuml Definition_internal.fireListeners
    title Definition: internal.fireListeners()

    start
        partition SyncTask {
            :binder, event, capture/
            :const target = event.[[./Definition_Event.currentTarget.svg currentTarget]])]
            :const map = internal.listenersMaps.get(target)]
            :const listeners = map.get(event.[[./Definition_Event.type.svg type]])]
            :let result = true]
            if (listeners instanceof Array) then (yes)
                :let listener]
                while(let i = 0; i < listeners.length; i++)
                    :listener = listeners[i] ]
                    if (listener.capture == capture && !listener.removed) then (yes)
                        :binder.passive = listener.passive]
                        :result = listener.callback.call(undefined, event) && result]
                        if (listener.once) then (yes)
                            :target.[[./Definition_EventTarget.removeEventListener.svg removeEventListener]](event.[[./Definition_Event.type.svg type]], listener.callback, listener.capture, listener.passive, listener.once)|
                        endif
                    endif
                endwhile
                :binder.passive = false]
            endif
            :return result/
        }
    end
@enduml

@startuml Definition_Monitorable.constructor
    title Definition: Monitorable#constructor()

    start
        partition SyncTask {
            :this._stack = [[./Definition_exports.getStack.svg exports.getStack()]] ]
            :this._uuid = [[./Definition_exports.getUuid.svg exports.getUuid()]] ]
        }
    end
@enduml

@startuml Definition_Monitorable.getUuid
    title Definition: Monitorable#getUuid()

    start
        partition SyncTask {
            :return this._uuid/
        }
    end
@enduml

@startuml Definition_Monitorable.getCreationStack
    title Definition: Monitorable#getCreationStack()

    start
        partition SyncTask {
            :return this._stack/
        }
    end
@enduml

@startuml Definition_Disposable.constructor
    title Definition: Disposable#constructor()

    start
        partition SyncTask {
            :[[./Definition_Monitorable.constructor.svg super()]] |
            :this._disposed = false]
            :this._disposing = false]
            :internal.undisposed.set([[./Definition_Monitorable.getUuid.svg this.getUuid()]], this)]
        }
    end
@enduml

@startuml Definition_Disposable.disposeInternal
    title Definition: Disposable#disposeInternal()

    start
        partition SyncTask {
            if (this._disposing) then (yes)
                :this._disposed = true]
                :internal.undisposed.delete([[./Definition_Monitorable.getUuid.svg this.getUuid()]])]
                :this._disposing = false]
            else (no)
                :throw new Error(Errors.MANUAL_CALL)]
            endif
        }
    end
@enduml

@startuml Definition_Disposable.dispose
    title Definition: Disposable#dispose()

    start
        partition SyncTask {
            if (!this._disposed) then (yes)
                :this._disposing = true]
                :[[./Definition_Disposable.disposeInternal.svg this.disposeInternal()]] |
                if (!this._disposed && this._disposing) then (yes)
                    :throw new Error(Errors.BROKEN_CHAIN)]
                endif
            endif
        }
    end
@enduml

@startuml Definition_Disposable.isDisposed
    title Definition: Disposable#isDisposed()

    start
        partition SyncTask {
            :return this._disposed/
        }
    end
@enduml

@startuml Definition_EventListener.constructor
    title Definition: EventListener#constructor()

    start
        partition SyncTask {
            :callback, capture, passive, once/
            :[[./Definition_Monitorable.constructor.svg super()]] |
            :this.callback = callback]
            :this.capture = capture]
            :this.passive = passive]
            :this.removed = false]
            :this.once = once]
        }
    end
@enduml

@startuml Definition_EventListener.handleEvent
    title Definition: EventListener#handleEvent()

    start
        partition SyncTask {
            :event/
            :this.callback(event)|
        }
    end
@enduml

@startuml Definition_EventBinder.constructor
    title Definition: EventBinder#constructor()

    start
        partition SyncTask {
            :phase, target, current/
            :this.phase = EventPhase.NONE]
            :this.passive = false]
            :this.stopped = false]
            :this.prevented = false]
            :this.target = target]
            :this.current = current]
        }
    end
@enduml

@startuml Definition_Event.constructor
    title Definition: Event#constructor()

    start
        partition SyncTask {
            :type/
            :this._type = type]
            :this._timeStamp = [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now Date.now()]] ]
            :[[./Definition_Event.setBinderInternal.svg this.setBinderInternal]](new EventBinder(EventPhase.NONE))]
        }
    end
@enduml

@startuml Definition_Event.type
    title Definition: Event#type

    start
        partition SyncTask {
            :return this._type/
        }
    end
@enduml

@startuml Definition_Event.timeStamp
    title Definition: Event#timeStamp

    start
        partition SyncTask {
            :return this._timeStamp/
        }
    end
@enduml

@startuml Definition_Event.defaultPrevented
    title Definition: Event#defaultPrevented

    start
        partition SyncTask {
            :return this._binder.prevented/
        }
    end
@enduml

@startuml Definition_Event.target
    title Definition: Event#target

    start
        partition SyncTask {
            :return this._binder.target/
        }
    end
@enduml

@startuml Definition_Event.currentTarget
    title Definition: Event#currentTarget

    start
        partition SyncTask {
            :return this._binder.current/
        }
    end
@enduml

@startuml Definition_Event.eventPhase
    title Definition: Event#eventPhase

    start
        partition SyncTask {
            :return this._binder.phase/
        }
    end
@enduml

@startuml Definition_Event.preventDefault
    title Definition: Event#preventDefault()

    start
        partition SyncTask {
            if (!this._binder.passive) then (yes)
                :this._binder.prevented = true]
            endif
        }
    end
@enduml

@startuml Definition_Event.stopPropagation
    title Definition: Event#stopPropagation()

    start
        partition SyncTask {
            if (!this._binder.passive) then (yes)
                :this._binder.stopped = true]
            endif
        }
    end
@enduml

@startuml Definition_Event.setBinderInternal
    title Definition: Event#setBinderInternal()

    start
        partition SyncTask {
            :binder/
            if (binder instanceof EventBinder) then (yes)
                :this._binder = binder]
            endif
        }
    end
@enduml

@startuml Definition_EventTarget.constructor
    title Definition: EventTarget#constructor()

    start
        partition SyncTask {
            :[[./Definition_Disposable.constructor.svg super()]]|
            :internal.listenersMaps.set(this, new Map())]
        }
    end
@enduml

@startuml Definition_EventTarget.disposeInternal
    title Definition: EventTarget#disposeInternal()

    start
        partition SyncTask {
            :internal.listenersMaps.delete(this)]
            :[[./Definition_Disposable.disposeInternal.svg super()]]|
        }
    end
@enduml

@startuml Definition_EventTarget.addEventListener
    title Definition: EventTarget#addEventListener()

    start
        partition SyncTask {
            :type, callback, capture, passive, once/
            :const listenersMap = internal.listenersMaps.get(this)]
            :let listeners = listenersMap.get(type)]
            :let listener = null]
            if (!listeners) then (yes)
                :listeners = [] ]
                :listenersMap.set(type, listeners)]
            endif
            while (let i = 0; i < listeners.length; i++)
                if (!listeners[i].removed && \nlisteners[i].callback === callback && \nlisteners[i].capture === capture) then (yes)
                    :listener = listeners[i] ]
                    :listener.passive = passive]
                    :listener.once = once]
                endif
            endwhile
            if (!listener) then (yes)
                :listener = new EventListener(callback, capture, passive, once)]
                :listeners.push(listener)]
            endif
        }
    end
@enduml

@startuml Definition_EventTarget.removeEventListener
    title Definition: EventTarget#addEventListener()

    start
        partition SyncTask {
            :type, callback, capture, passive, once/
            :const listenersMap = internal.listenersMaps.get(this)]
            :const listeners = listenersMap.get(type)]
            if (listeners) then (yes)
                while (let i = 0; i < listeners.length; i++)
                    if (!listeners[i].removed && \nlisteners[i].callback === callback && \nlisteners[i].capture === capture) then (yes)
                        :listeners[i].removed = true]
                        :listeners[i].callback = null]
                        :listeners[i].capture = null]
                        :listeners[i].passive = null]
                        :listeners[i].once = null]
                        :listeners.splice(i, 1)]
                    endif
                endwhile
                if (listeners.length === 0) then (yes)
                    :listenersMap.remove(type)]
                endif
            endif
        }
    end
@enduml

@startuml Definition_EventTarget.dispatchEvent
    title Definition: EventTarget#dispatchEvent()

    start
        partition SyncTask {
            :event/
            :return internal.[[.//Definition_internal.dispatchEvent.svg dispatchEvent]](this, event)/
        }
    end
@enduml

@startuml Definition_NodeIndex.constructor
    title Definition: NodeIndex#constructor()

    start
        partition SyncTask {
            :parent, children/
            :this.parent = null]
            :this.children = [] ]
            if (parent) then (yes)
                :this.parent = parent]
            endif
            if (children) then (yes)
                :this.children = children]
            endif
            :this/
        }
    end
@enduml

@startuml Definition_Node.constructor
    title Definition: Node#constructor()

    start
        partition SyncTask {
            :[[./Definition_EventTarget.constructor.svg super()]]|
            :internal.nodesIndices.set(this, new NodeIndex())]
            :this/
        }
    end
@enduml

@startuml Definition_Node.disposeInternal
    title Definition: Node#disposeInternal()

    start
        partition SyncTask {
            :const parent = internal.nodesIndices.get(this).parent]
            :const children = internal.nodesIndices.get(this).children]
            while (let i = 0; i < children.length; i++)
                :children[i].[[./Definition_Disposable.dispose.svg dispose]]() ]
            endwhile
            if (parent != null) then (yes)
                :const parIndex = internal.nodesIndices.get(parent).children.indexOf(this)]
                :internal.nodesIndices.get(parent).children.splice(parIndex, 1)]
            endif
            :internal.nodesIndices.delete(this)]
            :[[./Definition_EventTarget.disposeInternal.svg super()]]|
        }
    end
@enduml

@startuml Definition_Node.isConnected
    title Definition: Node#isConnected

    start
        partition SyncTask {
            :const index = internal.nodesIndices.get(this)]
            if (index.parent || index.children.length) then (yes)
                :return true/
            endif
            :return false/
        }
    end
@enduml

@startuml Definition_Node.parentNode
    title Definition: Node#parentNode

    start
        partition SyncTask {
            :return internal.nodesIndices.get(this).parent/
        }
    end
@enduml

@startuml Definition_Node.childNodes
    title Definition: Node#childNodes

    start
        partition SyncTask {
            :const children = internal.nodesIndices.get(this).children]
            :const result = new Map()]
            while (for let i = 0; i < children.length; i++)
                :result.set(i, children[i]) ]
            endwhile
            :return result/
        }
    end
@enduml

@startuml Definition_Node.firstChild
    title Definition: Node#firstChild

    start
        partition SyncTask {
            :const children = internal.nodesIndices.get(this).children]
            if (children.length > 0) then (yes)
                :return children[0] /
            endif
            :return null/
        }
    end
@enduml

@startuml Definition_Node.lastChild
    title Definition: Node#lastChild

    start
        partition SyncTask {
            :const children = internal.nodesIndices.get(this).children]
            if (children.length > 0) then (yes)
                :return children[children.length - 1] /
            endif
            :return null/
        }
    end
@enduml

@startuml Definition_Node.nextSibling
    title Definition: Node#nextSibling

    start
        partition SyncTask {
            :const parent = internal.nodesIndices.get(this).parent]
            if (parent) then (yes)
                :const index = parent.children.indexOf(this) ]
                if (parent.children.length > index + 1) then (yes)
                    :return parent.children[index + 1] /
                endif
            endif
            :return null/
        }
    end
@enduml

@startuml Definition_Node.previousSibling
    title Definition: Node#previousSibling

    start
        partition SyncTask {
            :const parent = internal.nodesIndices.get(this).parent]
            if (parent) then (yes)
                :const index = parent.children.indexOf(this) ]
                if (index > 0) then (yes)
                    :return parent.children[index - 1] /
                endif
            endif
            :return null/
        }
    end
@enduml

@startuml Definition_Node.getRootNode
    title Definition: Node#getRootNode()

    start
        partition SyncTask {
            :let root = this]
            :let parent = internal.nodesIndices.get(this).parent]
            while (parent)
                :root = parent]
                :parent = internal.nodesIndices.get(root).parent]
            endwhile
            :return root/
        }
    end
@enduml

@startuml Definition_Node.hasChildNodes
    title Definition: Node#hasChildNodes()

    start
        partition SyncTask {
            :const children = internal.nodesIndices.get(this).children]
            if (children.length > 0) then (yes)
                :return true/
            endif
            :return false/
        }
    end
@enduml

@startuml Definition_Node.contains
    title Definition: Node#contains()

    start
        partition SyncTask {
            :otherNode/
            :const children = internal.nodesIndices.get(this).children]
            if (children.indexOf(otherNode) >= 0) then (yes)
                :return true/
            endif
            :return false/
        }
    end
@enduml

@startuml Definition_Node.appendChild
    title Definition: Node#appendChild()

    start
        partition SyncTask {
            :childNode/
            :[[./Definition_Node.insertBefore.svg this.insertBefore]](childNode, null)|
            :childNode/
        }
    end
@enduml

@startuml Definition_Node.insertBefore
    title Definition: Node#insertBefore()

    start
        partition SyncTask {
            :newNode, refNode/
            :internal.nodesIndices.get(newNode).parent = this]
            :const children = internal.nodesIndices.get(this).children]
            :const newIndex = children.indexOf(newNode)]
            if (newIndex >= 0) then (yes)
                :children.splice(newIndex, 1)]
            endif
            if (refNode == null) then (yes)
                :children.push(newNode)]
            else (no)
                :children.splice(children.indexOf(refNode), 0, newNode)]
            endif
            :newNode/
        }
    end
@enduml

@startuml Definition_Node.removeChild
    title Definition: Node#removeChild()

    start
        partition SyncTask {
            :child/
            :const children = internal.nodesIndices.get(this).children]
            :const index = children.indexOf(child)]
            if (index >= 0) then (yes)
                :internal.nodesIndices.get(child).parent = null]
                :children.splice(index, 1)]
            endif
            :child/
        }
    end
@enduml

@startuml Definition_Node.replaceChild
    title Definition: Node#replaceChild()

    start
        partition SyncTask {
            :newChild, oldChild/
            :const children = internal.nodesIndices.get(this).children]
            :const index = children.indexOf(oldChild)]
            if (index >= 0) then (yes)
                :internal.nodesIndices.get(oldChild).parent = null]
                :children.splice(index, 1, newChild)]
            endif
            :oldChild/
        }
    end
@enduml